services:
  backend:
    build:
      context: ${BACKEND_PATH}
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-backend
    working_dir: /app
    stdin_open: true
    tty: true
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ${BACKEND_PATH}:/app
      - ${BACKEND_PATH}/logs:/app/logs
    ports:
      - "${BACKEND_PORT}:8000"
    env_file:
      - ./backend.env
    depends_on:
      - postgres
      - redis

  celery-broadcast:
    build:
      context: ${BACKEND_PATH}
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-celery-broadcast
    working_dir: /app
    stdin_open: true
    tty: true
    command: python -m celery -A backend worker -l debug --concurrency=5 -P threads -Q boardcast_queue
    volumes:
      - ${BACKEND_PATH}:/app
      - ${BACKEND_PATH}/logs:/app/logs
    env_file:
      - ./backend.env
    depends_on:
      - backend
      - redis

  celery-io:
    build:
      context: ${BACKEND_PATH}
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-celery-io
    working_dir: /app
    stdin_open: true
    tty: true
    command: python -m celery -A backend worker -l info --concurrency=5 -P eventlet -Q io_queue
    volumes:
      - ${BACKEND_PATH}:/app
      - ${BACKEND_PATH}/logs:/app/logs
    env_file:
      - ./backend.env
    depends_on:
      - backend
      - redis

  frontend:
    build:
      context: ${FRONTEND_PATH}
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-frontend
    working_dir: /app
    stdin_open: true
    tty: true
    volumes:
      - ${FRONTEND_PATH}:/app:cached
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:3000"
    env_file:
      - ./frontend.env

  image-processor:
    build:
      context: ${IMAGE_PROCESSOR_PATH}
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-image-processor
    working_dir: /app
    stdin_open: true
    tty: true
    command: python -m src.sqs
    volumes:
      - ${IMAGE_PROCESSOR_PATH}:/app
    env_file:
      - ./image-processor.env

  postgres:
    image: pgvector/pgvector:0.8.0-pg16
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    ports:
      - "${REDIS_PORT}:6379"

volumes:
  postgres_data:
